import{_ as s,r as t,c as l,b as i,d as e,e as o,w as r,a as n,o as p}from"./app-B1FjkL1b.js";const c={},d=n(`<h1 id="installation-deployment" tabindex="-1"><a class="header-anchor" href="#installation-deployment"><span>Installation &amp; Deployment</span></a></h1><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>If using Docker, you can skip directly to step 5</p></div><h2 id="_1-clone-the-repository" tabindex="-1"><a class="header-anchor" href="#_1-clone-the-repository"><span>1. Clone the repository:</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">git</span> clone https://github.com/your-repo/line-pdf-bot.git</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_2-install-server-dependencies" tabindex="-1"><a class="header-anchor" href="#_2-install-server-dependencies"><span>2. Install server dependencies:</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token builtin class-name">cd</span> ChatPDF-LineBot</span>
<span class="line">pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Consider running in a virtual environment. Here are the commands for creating a virtual environment using Python&#39;s built-in venv:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token builtin class-name">cd</span> ChatPDF-LineBot</span>
<span class="line">python <span class="token parameter variable">-m</span> venv .<span class="token punctuation">\\</span>venv</span>
<span class="line">.<span class="token punctuation">\\</span>venv<span class="token punctuation">\\</span>Scripts<span class="token punctuation">\\</span>activate</span>
<span class="line">pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-install-node-dependencies" tabindex="-1"><a class="header-anchor" href="#_3-install-node-dependencies"><span>3. Install Node dependencies:</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token builtin class-name">cd</span> ChatPDF-LineBot/View</span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-build-the-frontend" tabindex="-1"><a class="header-anchor" href="#_4-build-the-frontend"><span>4. Build the frontend:</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token builtin class-name">cd</span> View</span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span></span>
<span class="line"><span class="token function">npm</span> run build</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-log-in-to-the-line-platform" tabindex="-1"><a class="header-anchor" href="#_5-log-in-to-the-line-platform"><span>5. Log in to the LINE platform</span></a></h2><ul><li>Create a Line Bot. <ul><li>Add a new provider, e.g., &quot;My Provider&quot;.</li><li>Under &quot;My Provider&quot;, create a new channel of type &quot;Messaging API&quot;, e.g., &quot;My AI Assistant&quot;.</li><li>Go to the &quot;My AI Assistant&quot; channel page, select the &quot;Messaging API&quot; tab, and generate a channel access token.</li></ul></li><li>Create a LIFF page. <ul><li>Under the same <code>Provider</code> (e.g., &quot;My Provider&quot;), create a new channel of type &quot;Line Login&quot;, e.g., &quot;My LIFF Page&quot;.</li><li>Go to the &quot;My LIFF Page&quot; channel page, select the &quot;LIFF&quot; tab, and create a new LIFF page.</li><li>For the <code>Endpoint URL</code>, enter <code>https://&lt;your-domain-or-IP-address&gt;/liff</code> (you can change this later).</li><li>For <code>Scopes</code>, select &quot;chat_message.write&quot; and &quot;openid&quot;.</li><li>Click <code>Add</code> to create.</li></ul></li></ul><h2 id="_6-log-in-to-openai-or-groq-platform-or-other-platforms" tabindex="-1"><a class="header-anchor" href="#_6-log-in-to-openai-or-groq-platform-or-other-platforms"><span>6. Log in to OpenAI or Groq platform (or other platforms)</span></a></h2><ul><li>Generate an OpenAI API key.</li><li>Optionally generate other platform API keys (e.g., Groq), but ensure the API is compatible with OpenAI and remember to update <code>BASE_URL</code> in the next step.</li></ul><h2 id="_7-set-environment-variables" tabindex="-1"><a class="header-anchor" href="#_7-set-environment-variables"><span>7. Set environment variables</span></a></h2><p>You can set environment variables directly on the server or Docker.</p><p>If running on a local machine, copy the <code>.env.example</code> file, rename it to <code>.env</code>, and set the API keys, models, and other parameters.</p>`,19),u=n(`<h2 id="_8-run-the-server" tabindex="-1"><a class="header-anchor" href="#_8-run-the-server"><span>8. Run the server</span></a></h2><h3 id="using-docker" tabindex="-1"><a class="header-anchor" href="#using-docker"><span>Using Docker</span></a></h3><p><img src="https://img.shields.io/docker/image-size/adt109119/chatpdf-linebot/latest" alt="Docker Image Size (tag)"></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--name</span> chatpdf-linebot <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000 <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-v</span> /local/file/store/path:/app/db <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-e</span> <span class="token assign-left variable">LINE_CHANNEL_ACCESS_TOKEN</span><span class="token operator">=</span>YOUR_LINE_CHANNEL_ACCESS_TOKEN <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-e</span> <span class="token assign-left variable">LINE_CHANNEL_SECRET</span><span class="token operator">=</span>YOUR_LINE_CHANNEL_SECRET <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-e</span> <span class="token assign-left variable">LINE_LIFF_ID</span><span class="token operator">=</span>YOUR_LINE_LIFF_ID <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-e</span> <span class="token assign-left variable">LINE_LOGIN_CHANNEL_ID</span><span class="token operator">=</span>YOUR_LINE_LOGIN_CHANNEL_ID <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-e</span> <span class="token assign-left variable">MODEL_NAME</span><span class="token operator">=</span>YOUR_MODELS <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-e</span> <span class="token assign-left variable">BASE_URL</span><span class="token operator">=</span>BASE_URLS <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">-e</span> <span class="token assign-left variable">API_KEY</span><span class="token operator">=</span>API_KEYS <span class="token punctuation">\\</span></span>
<span class="line">adt109119/chatpdf-linebot</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="running-locally" tabindex="-1"><a class="header-anchor" href="#running-locally"><span>Running locally</span></a></h3><p>If steps 1-4 were completed without issues, simply run the following command to start the server:</p><p>The default <code>PORT</code> is <code>8000</code></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">python .<span class="token punctuation">\\</span>main.py</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_9-finalize-line-settings" tabindex="-1"><a class="header-anchor" href="#_9-finalize-line-settings"><span>9. Finalize LINE settings</span></a></h2><ul><li><p>Line Bot settings</p><ul><li>Go to the &quot;My AI Assistant&quot; channel page, select the &quot;Messaging API&quot; tab, set the &quot;Webhook URL&quot; to your app URL followed by the <code>/callback</code> path, e.g., <code>https://line.the-walking.fish.com/callback</code>, and click the &quot;Update&quot; button.</li><li>Click the &quot;Verify&quot; button to ensure the webhook is working.</li><li>Enable the &quot;Use webhook&quot; feature.</li><li>Disable the &quot;Auto-reply messages&quot; feature.</li><li>Disable the &quot;Greeting messages&quot; feature.</li></ul></li><li><p>Line LIFF page settings</p><ul><li>Go to the &quot;LIFF&quot; tab.</li><li>If the <code>Endpoint URL</code> was initially set to a placeholder, update it to the official LIFF page URL with the <code>/liff</code> path, e.g., <code>https://line.the-walking.fish.com/liff</code>.</li><li>Go back to the &quot;LIFF&quot; tab and copy the &quot;LIFF URL&quot;.</li></ul></li><li><p>Rich menu settings</p><ul><li>Go to the &quot;LINE Official Account Manager&quot;.</li><li>In the sidebar, find &quot;Rich menu&quot;.</li><li>Click &quot;Create&quot;.</li><li>Fill in the name, template, etc., as desired.</li><li>For &quot;Action&quot;, choose &quot;Link&quot; and enter the LIFF URL copied in the previous step.</li><li>Click &quot;Save&quot;.</li></ul></li></ul>`,10);function h(m,v){const a=t("RouteLink");return p(),l("div",null,[d,i("p",null,[e("See "),o(a,{to:"/en/configuration.html"},{default:r(()=>[e("Environment Variables List")]),_:1}),e(" for details")]),u])}const b=s(c,[["render",h],["__file","installation.html.vue"]]),k=JSON.parse('{"path":"/en/installation.html","title":"Installation & Deployment","lang":"en-US","frontmatter":{"title":"Installation & Deployment","lang":"en-US"},"headers":[{"level":2,"title":"1. Clone the repository:","slug":"_1-clone-the-repository","link":"#_1-clone-the-repository","children":[]},{"level":2,"title":"2. Install server dependencies:","slug":"_2-install-server-dependencies","link":"#_2-install-server-dependencies","children":[]},{"level":2,"title":"3. Install Node dependencies:","slug":"_3-install-node-dependencies","link":"#_3-install-node-dependencies","children":[]},{"level":2,"title":"4. Build the frontend:","slug":"_4-build-the-frontend","link":"#_4-build-the-frontend","children":[]},{"level":2,"title":"5. Log in to the LINE platform","slug":"_5-log-in-to-the-line-platform","link":"#_5-log-in-to-the-line-platform","children":[]},{"level":2,"title":"6. Log in to OpenAI or Groq platform (or other platforms)","slug":"_6-log-in-to-openai-or-groq-platform-or-other-platforms","link":"#_6-log-in-to-openai-or-groq-platform-or-other-platforms","children":[]},{"level":2,"title":"7. Set environment variables","slug":"_7-set-environment-variables","link":"#_7-set-environment-variables","children":[]},{"level":2,"title":"8. Run the server","slug":"_8-run-the-server","link":"#_8-run-the-server","children":[{"level":3,"title":"Using Docker","slug":"using-docker","link":"#using-docker","children":[]},{"level":3,"title":"Running locally","slug":"running-locally","link":"#running-locally","children":[]}]},{"level":2,"title":"9. Finalize LINE settings","slug":"_9-finalize-line-settings","link":"#_9-finalize-line-settings","children":[]}],"git":{"updatedTime":1718259148000,"contributors":[{"name":"ADT109119","email":"2.jerry32262686@gmail.com","commits":1}]},"filePathRelative":"en/installation.md"}');export{b as comp,k as data};
